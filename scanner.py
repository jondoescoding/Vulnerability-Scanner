# Imports of what will be needed for my code
import socket
import subprocess
import sys
import platform

#Global Variables
addressFamily = socket.AF_INET
protocol = socket.SOCK_STREAM
scan_type = "TCP"
portListv2 = [20,21,22,23,25,53,67,68,69,80,110,123,137,138,139,143,161,162,179,389,443,636,989,990]
bannerList = []

# Clears the screen
subprocess.call('clear' if platform.platform() in ("Linux", "Darwin") else "cls", shell=True)

IPaddressList = [str(ip) for ip in input("\nEnter one IP Address/Host name or multiple separated with a space: ").split()]
portList = [int(portNumbers) for portNumbers in input("\nEnter each port to be scanned separated by a space: ").split()]
def portScan(ipaddress, ports):
    # used to determine HOW many ipaddresses we will scan over
    for eachAddress in range(len(IPaddressList)):
        # WHAT addresses will be scanned over
        for ipAddress in IPaddressList:
            remoteServerIp = socket.gethostbyname(ipAddress)
            # information on which host+ipaddress we are about to scan
            print("-" * 60)
            print(f"Scanning remote host: {remoteServerIp}")
            print("-" * 60)
            for port in portList:
                try:
                    # quick info snippet showing which port is being scanned
                    print("\nCurrently scanning...Port: {}".format(port))
                    sock = socket.socket(addressFamily, protocol)
                    sock.settimeout(0.5)
                    result = sock.connect_ex((remoteServerIp, port))
                    if result == 0:
                        print (f"\nOpen Port Found...{port} : {(socket.getservbyport(port,(scan_type)))}")
                        # accepts data from the socket and puts it into a readable format
                        bannerName = sock.recv(1024).decode()
                        sock.close()
                        if bannerName != "":
                            # prints out if any banner is found
                            print("//" + ( "-" * 60))
                            print("\t \t \t BANNER FOUND")
                            print("\t", bannerName)
                            # add relevant banner information to a list to be scanned
                            bannerList.append(bannerName.strip())
                            with open ("vulnarable_banners.txt", "r") as vulneribilityFile:
                                for thisLine in vulneribilityFile:
                                    for vulneribility in bannerList:
                                        if vulneribility in thisLine:
                                            print(f"\n[!]Vulneribility found: {vulneribility} at port {port}")
                        else:
                            print("There is no banner on port: ", port)                            
                        print("//" + ( "-" * 60))
                    else:
                        print(f"Port {port} is closed\n") 
                # error detection
                except KeyboardInterrupt:
                    print ("\nKeyboard interrupted - CTRL C was pressed")
                    sys.exit(1)
                except socket.error:
                    print (f"Could not establish connect to Port: {port}\nError: {socket.error}\n" )
                    pass

if __name__ == "__main__":
    portScan(IPaddressList, portList)